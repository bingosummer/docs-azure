---
title: Using Azure Service Broker
owner: Partners
---

This topic describes how to use Azure Service Broker.

Before performing the procedures in this topic, ensure that you have installed the [Cloud Foundry Command Line Interface](http://docs.pivotal.io/pivotalcf/cf-cli/index.html) (cf CLI). 

##<a id="list-services"></a>List Services

1. In a terminal window, run `cf marketplace` to list all the service offerings from Azure Service Broker.

1. Run `cf marketplace -s SERVICE` to view the descriptions for the plans of a service.

<p class="note"><strong>Note</strong>: See the <a href="https://azure.microsoft.com/en-us/pricing/">Azure Pricing</a> topic to view pricing details for each service.</p>

##<a id="create"></a>Create Service Instances

This section describes how to create service instances for the services offered by Azure Service Broker.

###<a id="storage"></a>Azure Storage

#### Create 

Run `cf create-service azure-storage` to create a new storage account. The following example creates a storage account named `mystorageaccount` with the `standard` plan:

<pre class="terminal">$ cf create-service azure-storage standard mystorage -c storage-example-config.json
</pre>

The contents of `storage-example-config.json`:

<pre class="terminal">
{
  "resource_group_name": "myResourceGroup",
  "storage_account_name": "mystorageaccount",
  "location": "eastus",
  "account_type": "Standard_LRS"
}
</pre>

You can find more details [here](https://github.com/Azure/meta-azure-service-broker/blob/master/docs/azure-storage.md).

#### Bind

Bind the service instance `mystorage` to an app.

<pre class="terminal">$ cf bind-service myapp mystorage
</pre>

The credentials have the following format:

<pre class="terminal">
"VCAP_SERVICES": {
  "azure-storage": [
    {
      "credentials": {
        "primary_access_key": "PRIMARY-ACCOUNT-KEY",
        "secondary_access_key": "SECONDARY-ACCOUNT-KEY",
        "storage_account_name": "ACCOUNT-NAME"
      }
    }
  ]
}
</pre>

You can get the credentials from the `ENV['VCAP_SERVICES']` environment variable.

<p class="note"><strong>Note</strong>: Run <code>cf unbind-service</code> to delete the binding.</p>

###<a id="rediscache"></a>Azure Redis Cache

#### Create 

Run `cf create-service azure-rediscache` to create a new redis cache. The following example creates a redis cache named `myrediscache` with the `standard` plan:

<pre class="terminal">$ cf create-service azure-rediscache basic myrediscache -c rediscache-example-config.json
</pre>

The contents of `rediscache-example-config.json`:

<pre class="terminal">
{
  "resourceGroup": "redisResourceGroup",
  "cacheName": "myrediscache",
  "parameters": {
    "location": "eastus",
    "enableNonSslPort": false,
    "sku": {
      "name": "Basic",
      "family": "C",
      "capacity": 0
    }
  }
}
</pre>

For more information, see this [topic](https://github.com/Azure/meta-azure-service-broker/blob/master/docs/azure-redis-cache.md).

#### Bind

Bind the service instance `myrediscache` to an app.

<pre class="terminal">$ cf bind-service myapp myrediscache
</pre>

The credentials have the following format:

<pre class="terminal">
"VCAP_SERVICES": {
  "azure-rediscache": [
    {
      "credentials": {
        "hostname": "<cache-name>.redis.cache.windows.net",
        "name": "<cache-name>",
        "port": 6379,
        "primaryKey": "<primary-key>",
        "secondaryKey": "<secondary-key>",
        "sslPort": 6380
      }
    }
  ]
}
</pre>

You can get the credentials from `ENV['VCAP_SERVICES']`.

<p class="note"><strong>Note</strong>: Run <code>cf unbind-service</code> to delete the binding.</p>

###<a id="documentdb"></a>Azure DocumentDB

#### Create 
 
Run `cf create-service azure-documentdb` to create a new documentdb host and database. The following example shows how to create a documentdb host named `mydocdb` and a documentdb database named `docdb123` with the `standard` plan:

<pre class="terminal">$ cf create-service azure-documentdb standard mydocdb -c documentdb-example-config.json
</pre>

The contents of `documentdb-example-config.json`:

<pre class="terminal">
{
  "resourceGroup": "my-resource-group-name",
  "docDbAccountName": "mydocdb",
  "docDbName": "docdb123",
  "location": "westus"
}
</pre>

For more information, see this [topic](https://github.com/Azure/meta-azure-service-broker/blob/master/docs/azure-document-db.md).

#### Bind

Bind the service instance `mydocdb` to an app.

<pre class="terminal">$ cf bind-service myapp mydocdb
</pre>

The credentials have the following format:

<pre class="terminal">
"VCAP_SERVICES": {
  "azure-documentdb": [
    {
      "credentials": {
        "documentdb_host_endpoint": "https://YOUR_DOCUMENTDB_NAME.documents.azure.com:443/",
        "documentdb_master_key": "YOUR_SECRET_KEY_ENDING_IN_==",
        "documentdb_database_id": "YOUR_DOCUMENTDB_NAME",
        "documentdb_database_link": "dbs/ID_ENDING_IN_==/"
      }
    }
  ]
}
</pre>

You can get the credentials from `ENV['VCAP_SERVICES']`.

<p class="note"><strong>Note</strong>: Run <code>cf unbind-service</code> to  delete the binding.</p>

###<a id="servicebus-eventhub"></a>Azure Service Bus and Event Hub

#### Create 
 
Run `cf create-service azure-servicebus` to create a new service bus or event hub.

The following example creates a service bus named `myservicebus` with the `standard` plan:

<pre class="terminal">$ cf create-service azure-servicebus standard myservicebus -c servicebus-example-config.json
</pre>

The contents of `servicebus-example-config.json`:

<pre class="terminal">
{
  "resource_group_name": "myResourceGroup",
  "namespace_name": "myservicebus",
  "location": "eastus",
  "type": "Messaging",
  "messaging_tier": "Standard"
}
</pre>

The following example creates an event hub named `myeventhub` with the `standard` plan:

<pre class="terminal">$ cf create-service azure-servicebus standard myeventhub -c eventhub-example-config.json
</pre>

The contents of `eventhub-example-config.json`:

<pre class="terminal">
{
  "resource_group_name": "myResourceGroup",
  "namespace_name": "myeventhub",
  "location": "eastus",
  "type": "EventHub",
  "messaging_tier": "Standard"
}
</pre>

For more information, see this [topic](https://github.com/Azure/meta-azure-service-broker/blob/master/docs/azure-service-bus.md).

#### Bind

Bind the service instance `myservicebus` to an app.

<pre class="terminal">$ cf bind-service myapp myservicebus
</pre>

The credentials have the following format:

<pre class="terminal">
"VCAP_SERVICES": {
  "azure-servicebus": [
    {
      "credentials": {
        "namespace_name": "cf-2eac2d52-bfc9-4d0f-af28-c02187689d72",
        "key_name": "KEY-NAME",
        "key_value": "KEY-VALUE",
      }
    }
  ]
}
</pre>

You can get the credentials from `ENV['VCAP_SERVICES']`.

<p class="note"><strong>Note</strong>: Run <code>cf unbind-service</code> to  delete the binding.</p>

###<a id="sqldb"></a>Azure SQL Database

#### Create 
 
Run `cf create-service azure-sqldb` to create a new SQL server and database. The following example create a SQL database named `mysqldb` with the `standard` plan:

<pre class="terminal">$ cf create-service azure-sqldb standard mysqldb -c sqldb-example-config.json
</pre>

The contents of `sqldb-example-config.json`:

<pre class="terminal">
{
  "resourceGroup": "sqldbResourceGroup",
  "location": "westus",
  "sqlServerName": "mysqlserver",
  "sqlServerParameters": {
    "allowSqlServerFirewallRule": [
      {
      "ruleName": "new rule",
      "startIpAddress": "0.0.0.0",
      "endIpAddress": "255.255.255.255"
      }
    ],
    "properties": {
      "administratorLogin": "myusername",
      "administratorLoginPassword": "mypassword"
    }
  },
  "sqldbName": "mysqldb",
  "transparentDataEncryption": true,
  "sqldbParameters": {
    "properties": {
      "collation": "SQL_Latin1_General_CP1_CI_AS"
    }
  }
}
</pre>

Another example of `sqldb-example-config.json` for using servers specified in the broker configuration:

<pre class="terminal">
{
  "resourceGroup": "sqldbResourceGroup",
  "location": "westus",
  "sqlServerName": "mysqlserver",
  "sqldbName": "mysqldb",
  "transparentDataEncryption": true,
  "sqldbParameters": {
    "properties": {
      "collation": "SQL_Latin1_General_CP1_CI_AS"
    }
  }
}
</pre>

For more information, see this [topic](https://github.com/Azure/meta-azure-service-broker/blob/master/docs/azure-sql-db.md).

#### Bind

Bind the service instance `mysqldb` to an app.

<pre class="terminal">$ cf bind-service myapp mysqldb
</pre>

The credentials have the following format:

<pre class="terminal">
"VCAP_SERVICES": {
  "azure-sqldb": [
    {
      "credentials": {
        "sqldbName": "sqlDbA",
        "sqlServerName": "fake-server",
        "sqlServerFullyQualifiedDomainName": "fake-server.database.windows.net",
        "databaseLogin": "ulrich",
        "databaseLoginPassword": "u1r8chP@ss",
        "jdbcUrl": "jdbc:sqlserver://fake-server.database.windows.net:1433;database=fake-database;user=fake-admin;password=fake-password;Encrypt=true;TrustServerCertificate=false;HostNameInCertificate=*.database.windows.net;loginTimeout=30",
        "jdbcUrlForAuditingEnabled": "jdbc:sqlserver://fake-server.database.secure.windows.net:1433;database=fake-database;user=fake-admin;password=fake-password;Encrypt=true;TrustServerCertificate=false;HostNameInCertificate=*.database.secure.windows.net;loginTimeout=30"
      }
    }
  ]
}
</pre>

Among them, `jdbcUrlForAuditingEnabled` is the JDBC url to connect to the database if auditing is enabled. For more information, see this [topic](https://docs.microsoft.com/en-us/azure/sql-database/sql-database-auditing-and-dynamic-data-masking-downlevel-clients).

You can get the credentials from `ENV['VCAP_SERVICES']`.

<p class="note"><strong>Note</strong>: Run <code>cf unbind-service</code> to  delete the binding.</p>

##<a id="delete"></a>Delete a Service Instance

<p class="note"><strong>Note</strong>: Before deleting a service instance, ensure there are no apps bound to the service instance and no data contained within, such as objects in a storage account.</p>
Run the following command to delete a service instance:
<pre class="terminal">$ cf delete-service YOUR-SERVICE-INSTANCE
Really delete the service YOUR-SERVICE-INSTANCE> y
Deleting service YOUR-SERVICE-INSTANCE in org system / space dev1 as appdev1...
OK
Delete in progress. Use 'cf services' or 'cf service YOUR-SERVICE-INSTANCE' to check operation status.
</pre>
